creacion a la clase.
 . Reserva de espacio para el objeto
 . Ejecucion dle codigo inicializador o constructor.
-Devuelve la referencia al objeto
-Asociar la referencia a una variable (a traves de ella podemos enviarle mensajes al objeto).
 -> new Triangulo(10,10,10,"Amarillo","Violeta") 5 parametros, 3 int y 2 string.

Los programas se organizan como una coleccion de objetos que cooperan entre si enviandose mensajes.
Cada objeto es instancia de una clase.
Los objetos se crean a medida que se necesita.
El USUARIO le envia un mensaje a un objeto, en caso de que un objeto conozca a otro puede enviarle un mensaje, asi los mensajes fluyen por el sistema.
Cuando los objetos ya no son necesarios se borran de la memoria. 

REFERENCIAS:
String saludo1 = new String("hola");
String saludo2 = new String("hola");
si ahora 
saludo1 = saludo2 entonces la variable saludo ahora apunta a la posicion de memoria de saludo 2 (creada con el new) y el recolector de basura se encarga de eliminar el contenido de la posicion de memoria a la que apuntaba saludo1 antes de la asignacion.

Si comparo dos objetos con == o !=, lo que estoy comparando es si estan apuntando a la misma posicion de memoria
si yo quiero saber si dos objetos tienen los mismos valores adentro, necesito utilizar el metodo EQUALS

Si yo:
string test1 = "hola";
string test2 = "hola";
boolean iguales = test1 == test2;
System.out.println(iguales) devuelve TRUE
como estoy comparando dos strings que son iguales, java no crea un nuevo string en memoria porque se da cuenta que estoy usando el mismo string (hola) y le asigna a las dos variables, la misma posicion de memoria (donde esta el string "hola");

si ahora cambio test2 por
string test2 = new string("hola");
 devuelve FALSO, porque ahora test1 tiene una posicion de memoria y test2, con el new, otra.
Si quiero comparar test1 con lo que hay en la posicion de memoria test2, siguiente linea.

boolean valoresIguales = test2.equals(test1);

el equals necesita un objeto como parametro (en este caso test1); equals compara el contenido de los objetos y no las direcciones de memoria.

------------------
-CLASE: Grupo de objetos con caracteristicas similares.

-OBJETO: Conjunto de atributos y métodos, un objeto se deriva de una clase

-ATRIBUTOS: Caracteristicas del objeto
-METODOS: Acciones que realiza el objeto

-ABSTRACCION: Proceso mental de extraccion de las caracteristicas esenciales de algo, ignorando los detalles superfluos.

ENCAPSULAMIENTO: Proceso por el que se ocultan los detalles del soporte de las caracteristicas de una abstrucción.

-HERENCIA: Es donde una clase nueva se crea a partir de una clase existente, heredando todos sus atributos y métodos.

-POLIMORFISMO: Cualidad que poseen los objetos para responder de distinto modo ante el mismo mensaje.

--------
Crear objeto tipo string

String test = "Hola desde JAVA"
test.(opciones) para trabajar con el objeto

